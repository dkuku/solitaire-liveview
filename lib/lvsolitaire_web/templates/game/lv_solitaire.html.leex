<center>
  <%  {reserve,tableau,foundation } = assigns.game %>
  <%  {deck,waste} = reserve %>
  <div class="playingCards inline">
    <ul class="deck inline">
      <%= if len(deck)>0 do %>
        <%= render_card(assigns, :deck, :back) %>
      <% else %>
        <%= render_card(assigns, :deck, nil) %>
      <% end %>
    </ul>
  </div>

  <div class="playingCards inline">
    <ul class="deck inline">
      <%= for {suit, rank} = card  <- Enum.reverse(waste) do %>
        <%= render_card(assigns, :deck, card, 0) %>
      <% end %>
    </ul>
  </div>

  <%= for {foundation, idx}  <- Enum.with_index(foundation) do %>
    <div class="playingCards inline">
      <ul class="deck inline">
      <%= render_card(assigns, :foundation, nil, idx) %>
      <%= for {suit, rank} = card <- Enum.reverse(foundation) do %>
        <%= render_card(assigns, :foundation, card, idx) %>
      <% end %>
      </ul>
    </div>
  <% end %>
</center>

<center phx-click="unselect">
  <%= for {{invisible, visible}, idx}  <- Enum.with_index(tableau) do %>
    <div class="playingCards inline">
      <ul class="tableau">
        <%= if len(invisible)==0 and len(visible)==0 do %>
          <%= render_card(assigns, :tableau, :nil, idx) %>
        <% else %>
          <%= for card  <- invisible do %>
            <%= render_card(assigns, :tableau, :back, idx) %>
          <% end %>
          <%= for {suit, rank} = card  <- Enum.reverse(visible) do %>
            <%= render_card(assigns, :tableau, card, idx) %>
          <% end %>
        <% end %>
      </ul>
    </div>
  <% end %>
</center>
